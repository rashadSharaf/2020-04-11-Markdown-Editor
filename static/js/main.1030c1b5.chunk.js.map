{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","updateInput","ev","input","target","value","setState","console","log","state","style","display","flexDirection","backgroundColor","width","margin","basename","height","padding","this","onChange","dangerouslySetInnerHTML","__html","marked","border","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qTAIqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,YAAc,SAACC,GACb,IAAIC,EAAQD,EAAGE,OAAOC,MACtB,EAAKC,SAAS,CAAEH,UAChBI,QAAQC,IAAI,EAAKC,MAAMN,QARvB,EAAKM,MAAQ,CACXN,MAAO,IAJQ,E,qDAejB,OACE,yBAAKO,MAAO,CAAEC,QAAQ,OAAQC,cAAc,SAAUC,gBAAiB,YACrE,wBAAIH,MAAO,CAAEI,MAAO,MAAOC,OAAQ,gBAAnC,0BAGA,kBAAC,IAAD,CAAYC,SAAS,KACnB,yBAAKN,MAAO,CAAEC,QAAS,OAAQC,cAAe,QAC5C,0BACEF,MAAO,CACLC,QAAS,OACTC,cAAe,SACfE,MAAO,MACPG,OAAQ,QACRF,OAAQ,SAGV,sEACA,8BACEL,MAAO,CAAEQ,QAAS,OAAQD,OAAQ,SAClCZ,MAAOc,KAAKV,MAAMN,MAClBiB,SAAUD,KAAKlB,eAGnB,yBACES,MAAO,CACLC,QAAS,OACTI,OAAQ,OACRH,cAAe,SACfE,MAAO,QAGT,6CACA,yBACEO,wBAAyB,CAAEC,OAAQC,IAAOJ,KAAKV,MAAMN,QACrDO,MAAO,CACLG,gBAAiB,QACjBK,QAAS,OACTD,OAAQ,QACRO,OAAQ,6B,GAtDOC,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.1030c1b5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { HashRouter } from \"react-router-dom\";\nimport marked from \"marked\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    //initial state values\n    this.state = {\n      input: \"\",\n    };\n  }\n\n  updateInput = (ev) => {\n    let input = ev.target.value;\n    this.setState({ input });\n    console.log(this.state.input);\n  };\n\n  render() {\n    return (\n      <div style={{ display:\"flex\", flexDirection:\"column\", backgroundColor: \"#bada55\" }}>\n        <h1 style={{ width: \"40%\", margin: \"0.1rem auto\" }}>\n          Rashad MARKDOWN Engine\n        </h1>\n        <HashRouter basename=\"/\">\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n            <form\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                width: \"50%\",\n                height: \"100vh\",\n                margin: \"1rem\",\n              }}\n            >\n              <h4>Please Type in your MARKDOWN code here</h4>\n              <textarea\n                style={{ padding: \"1rem\", height: \"50rem\" }}\n                value={this.state.input}\n                onChange={this.updateInput}\n              />\n            </form>\n            <div\n              style={{\n                display: \"flex\",\n                margin: \"1rem\",\n                flexDirection: \"column\",\n                width: \"50%\",\n              }}\n            >\n              <h4> HTML OUTPUT </h4>\n              <div\n                dangerouslySetInnerHTML={{ __html: marked(this.state.input) }}\n                style={{\n                  backgroundColor: \"white\",\n                  padding: \"1rem\",\n                  height: \"50rem\",\n                  border: \"3px solid black\",\n                }}\n              ></div>\n            </div>\n          </div>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}